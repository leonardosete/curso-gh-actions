name: CI
on:
  pull_request:
    branches: [develop, master]
  push:
    branches: [develop, master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - name: STEP 1 - CHECKOUT ACTIONS
        uses: actions/checkout@v3

      - name: STEP 2 - USE NODEJS
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: STEP 3 - GET NPM CACHE DIRECTORY
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT} ## nova forma de usar set-output

      - name: STEP 4 - CACHE NODE MODULES
        uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: STEP 5 - INSTALL NODEJS DEPENDENCIES
        run: npm ci ## similar to npm install

      - name: STEP 6 - CHECK CODE FORMATTING
        run: npm run format:check

      - name: STEP 7 - RUN TESTS
        run: npm test -- --coverage
        env:
          CI: true ## com essa variável, não fica interativo

      - name: STEP 8 - UPLOAD TEST COVERAGE
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage

      - name: STEP 9 - BUILD PROJECT
        if: github.event_name == 'push'
        run: npm run build

      - name: STEP 10 - UPLOAD BUILD COVERAGE
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

      - name: STEP 11 - ZIP ASSETS
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage

      # - name: Install Surge
      #   if: github.event_name == 'push'
      #   run: npm install -g surge

      - name: STEP 12 - CREATE A RELEASE
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_TOKEN_SLACK }}

      - name: STEP 13 - DEPLOY TO STAGING
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain eager-edge.surge.sh ## instala e executa o surge numa única linha de comando
        # run: surge ## caso estivesse usando o step "Install Surge"

      - name: STEP 14 - DEPLOY TO PRODUCTION
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx surge --project ./build --domain ubiquitous-library.surge.sh ## instala e executa o surge numa única linha de comando
        # run: surge ## caso estivesse usando o step "Install Surge"

      - name: STEP 15 - UPLOAD COVERAGE REPORTS
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: STEP 15 - OPEN ISSUE
        if: failure() && github.event_name == 'pull_request'
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.CUSTOM_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.",
            "assignees": ["${{ github.event.pull_request.user.login }}"]
            }'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
